 Que1:: what are closures? give an example of closures
Ans :: A closure is the combination of a function bundled together with references to its
       surrounding state. In other words, a closure gives you access to an outer 
        function's scope from an inner function. In JavaScript, closures are created every time a function
        is created, at function creation time

function Welcome(name) {
  var Info = function (message) {
    console.log(message + " " + name);
  };
  return Info;
}
var myFunction = Welcome("John");
myFunction("Welcome "); 
myFunction("Hello Mr.");

Que2:: what are the objects.
Ans::objects in JavaScript may be defined as an unordered collection of related data, of primitive or 
      reference types, in the form of “key: value” pairs. 
      ex: 
      let college = {
            Name : "shivaji college",
            location : "Morshi"
      }


que3::explain prototype.
ans::java script is a prototype based language whenever we creat a function using javascript ,
javascript engine adds a prototype property inside a function ,prototype property besically is
an objectwhere we can attached methods and properties in a prototype object which anable all 
the other object so inherites these method and property


que4::what is prototype chain.
ans::Prototype chaining is used to build new types of objects based on existing ones. It is similar to 
inheritance in a class based language.The prototype on object instance is available through Object.
getPrototypeOf(object) or (proto) property whereas prototype on constructors function is available
through Object.prototype.

 que5::what are call back?
 ans::A callback function is a function passed into another function as an argument. This function is invoked
  inside the outer function to complete an action. Let's take a simple example of how to use callback function


function print(name, callback) {
    console.log('Hi' + ' ' + name);
    callback();
}

function callMe() {
    console.log('I am callback function');
}

print('sanket', callMe);


que6::what is the used of setTimeout.
Ans::The setTimeout() method is used to call a function or evaluate an expression after a specified 
number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,

   setTimeout(function () {
     console.log("Good morning");
   }, 5000);

que7::what is an event loop and call stack.
ans::
     Event loop::
    The Event Loop is a queue of callback functions. When an async function executes, the callback function
    is pushed into the queue. The JavaScript engine doesn't start processing the event loop until the async
    function has finished executing the code.

    Call stack::
    Call Stack is a data structure for javascript interpreters to keep track of function calls
    (creates execution context) in the program. It has two major actions,
      When we call a function for its execution, we are pushing it to the stack.
      When the execution is completed, the function is popped out of the stack.



que8::what is creaction phase and execution phase.
Ans::Execution context consists of two phases
 - Creation Phase and the Execution Phase.
  Creation Phase ::
  During the creation phase of the execution context, JS allocates memory space for the functions and variables. 
  In case of functions, the whole function body is stored but in case of the variables, it is declared and 
  assigned a default value undefined.

Execution Phase::
 In this phase JavaScript engine executes the code on a line-by-line basis meaning one line at a time.
  It is in this phase where the variables are assigned the values actually supplied for them. 


que9::what are function constructor
Ans:: The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as eval(). However, unlike eval (which may have access to the local scope), the Function constructor creates functions which execute in the global scope only.
      new Function(functionBody) new Function(arg0, functionBody) new Function(arg0, arg1, functionBody) new Function(arg0, arg1, /* … ,*/ argN, functionBody)




  Que10::explain call(),apply(),blind()methods.Give an example of call(),apply(),blind().
  ans::The call() method is a predefined JavaScript method. It can be used to invoke (call) 
  a method with an owner object as an argument (parameter). With call() , an object can use 
  a method belonging to another object
const person = {
      fullName: function() {
        return this.firstName + " " + this.lastName;
      }
    }
    const person1 = {
      firstName:"John",
      lastName: "Doe"
    }
    const person2 = {
      firstName:"Mary",
      lastName: "Doe"
    }

      person.fullName.call(person1);


The Function.prototype.apply() method allows you to call a function with a given this 
value and arguments provided as an array. 
let arr = [1, 2, 3];
 let numbers = [4, 5, 6]; 
 arr.push.apply(arr, numbers); 
 console.log(arr); 


The bind() method creates a new function that, when called, has its this keyword set to the 
provided value, with a given sequence of arguments preceding any provided when the new function 
is called.
const person = {
  firstName:"John",
  lastName: "Doe",
  fullName: function () {
    return this.firstName + " " + this.lastName;
  }
}

const member = {
  firstName:"Hege",
  lastName: "Nilsen",
}
let fullName = person.fullName.bind(member);



Que11::Give an example of inheritance using function constructor

function student(name, age) {
            this.name = name;
            this.age = age;
        };
        function newstudent(name, age  specialization)
        {
           student.call(this, name, age);        
            this.specialization = specialization;
        }
        console.log(student.prototype);
        console.log(newstudent.prototype);





